using System;
using System.Collections.Generic;
using StringBuilder = System.Text.StringBuilder;
using RotateFlipType = System.Drawing.RotateFlipType;

namespace DotNetTransformer.Math.Group.Transform2D {
	[Serializable]
	public struct Octagon2D : IFiniteGroupElement<Octagon2D>
	{
		public readonly byte Value;
		private Octagon2D(byte value) { Value = value; }
		private Octagon2D(int value) { Value = (byte)value; }

		private const byte _count = 16;
		private static readonly string[] _names;
		public static readonly FiniteGroup<Octagon2D> AllValues;

		/// <summary>
		/// "NO": No changes.
		/// </summary>
		public static readonly Octagon2D None;
		/// <summary>
		/// "HT": 180 degree rotation.
		/// </summary>
		public static readonly Octagon2D HalfTurn;
		/// <summary>
		/// "FX": Horizontal flip. Reflection across y-axis.
		/// </summary>
		public static readonly Octagon2D FlipX;
		/// <summary>
		/// "FY": Vertical flip. Reflection across x-axis.
		/// </summary>
		public static readonly Octagon2D FlipY;
		/// <summary>
		/// "PD": Reflection across primary diagonal line.
		/// </summary>
		public static readonly Octagon2D ReflectOverPrimaryDiagonal;
		/// <summary>
		/// "SD": Reflection across secondary diagonal line.
		/// </summary>
		public static readonly Octagon2D ReflectOverSecondaryDiagonal;
		/// <summary>
		/// "RC": 45 degree clockwise rotation.
		/// </summary>
		public static readonly Octagon2D RotateClockwise;
		/// <summary>
		/// "RN": 45 degree counter clockwise rotation.
		/// </summary>
		public static readonly Octagon2D RotateCounterClockwise;

		static Octagon2D() {
			_names = new string[_count] {
				"NO", "HT", "FX", "FY", "PD", "SD", "RC+RC", "RN+RN",
				"FX+RC", "FY+RC", "RC", "HT+RC", "HT+RN", "RN", "FX+RN", "FY+RN"
			};
			None                         = new Octagon2D(0);	// = FromString("NO");	// 0000
			HalfTurn                     = new Octagon2D(1);	// = FromString("HT");	// 0001
			FlipX                        = new Octagon2D(2);	// = FromString("FX");	// 0010
			FlipY                        = new Octagon2D(3);	// = FromString("FY");	// 0011
			ReflectOverPrimaryDiagonal   = new Octagon2D(4);	// = FromString("PD");	// 0100
			ReflectOverSecondaryDiagonal = new Octagon2D(5);	// = FromString("SD");	// 0101
			RotateClockwise              = new Octagon2D(10);	// = FromString("RC");	// 1010
			RotateCounterClockwise       = new Octagon2D(13);	// = FromString("RN");	// 1101
			AllValues = new DihedralGroupD8();
		}

		private sealed class DihedralGroupD8 : FiniteGroup<Octagon2D>
		{
			public DihedralGroupD8() { }

			public override Octagon2D IdentityElement { get { return None; } }
			public override int Count { get { return _count; } }
			public override bool Contains(Octagon2D item) { return true; }
			public override IEnumerator<Octagon2D> GetEnumerator() {
				for(byte i = 0; i < _count; ++i)
					yield return new Octagon2D(i);
			}
			public override int GetHashCode() { return _count; }
		}

		/// <summary><return>
		/// <para>true for "FX", "FY", "PD", "SD", "FX+RC", "FY+RC", "FX+RN", "FY+RN";</para>
		/// <para>false for "NO", "HT", "RC", "RN", "RC+RC", "RN+RN", "HT+RN", "HT+RC".</para>
		/// </return></summary>
		public bool IsReflection { get { return (0x3CC3 >> Value & 1) == 0; } }
		/// <summary><return>
		/// <para>true for "FX", "FY";</para>
		/// <para>false for other.</para>
		/// </return></summary>
		public bool IsAxisReflection { get { return (Value & 0xE) == 2; } }
		/// <summary><return>
		/// <para>true for "PD", "SD";</para>
		/// <para>false for other.</para>
		/// </return></summary>
		public bool IsDiagonalReflection { get { return (Value & 0xE) == 4; } }
		/// <summary><return>
		/// <para>true for "NO", "HT", "RC", "RN", "RC+RC", "RN+RN", "HT+RN", "HT+RC";</para>
		/// <para>false for "FX", "FY", "PD", "SD", "FX+RC", "FY+RC", "FX+RN", "FY+RN".</para>
		/// </return></summary>
		public bool IsRotation { get { return (0x3CC3 >> Value & 1) == 1; } }
		/// <summary><return>
		/// <para>true for "NO", "HT";</para>
		/// <para>false for other.</para>
		/// </return></summary>
		public bool IsStraightAngleRotation { get { return Value < 2; } }
		/// <summary><return>
		/// <para>true for "RC+RC", "RN+RN";</para>
		/// <para>false for other.</para>
		/// </return></summary>
		public bool IsRightAngleRotation { get { return (Value & 0xE) == 6; } }

		public Octagon2D InverseElement {
			get {
				return new Octagon2D(0x07701000 >> (Value << 1 & 0x1C) & 7 ^ Value);
				/*//
				return new Octagon2D((0x4195 >> (Value & 0xE) & 3) - 1 & 7 ^ Value);
				return new Octagon2D((0x96EA >> (Value & 0xE) & 3) - 2 & 7 ^ Value);
				return new Octagon2D((0xC3C0 >> Value & 1) - (Value >> 3) & 7 ^ Value);
				//*/
			}
		}
		/// <summary>
		/// The order of a cyclic group that can be generated by this element.
		/// </summary>
		public int CycleLength {
			get {
				return 1 << (0x5FF5A554 >> (Value << 1) & 3);
			}
		}
		public Octagon2D Add(Octagon2D other) {
			int c = (Value & 0x8) ^ (other.Value & 0x6);
			return new Octagon2D(0x84A0 >> (Value >> 1 & 1 | c) & 1
				^ (0x7800 >> c & 7) ^ Value ^ other.Value);
			/*//
			return new Octagon2D(0x801C >> ((Value & 0xA) * (other.Value & 0x6) >> 2) & 1
				^ (0x7800 >> ((Value & 0x8) ^ (other.Value & 0x6)) & 7) ^ Value ^ other.Value);
			return new Octagon2D(0xEADC >> ((Value & 0xA) * (other.Value & 0x6) >> 2) & 1
				^ (0x7800 >> ((Value & 0x8) ^ (other.Value & 0x6)) & 7) ^ Value ^ other.Value);
			//*/
		}
		public Octagon2D Subtract(Octagon2D other) {
			int c = (Value & 0x8) ^ (other.Value & 0xE);
			return new Octagon2D(0x4460 >> (Value >> 1 & 1 | c) & 1
				^ (0x7800 >> c & 7) ^ Value ^ other.Value);
		}
		public Octagon2D Times(int count) {
			return new Octagon2D((count & 1) * Value
				^ (0x07701000 >> ((count & 2) * 0xE & (Value << 1)) & 7)
				^ (0xF >> ((Value >> 1) - (count & 7)) & (0x3C00 >> Value) & 1)
			);
			/*//
			int v = (0x3C00 >> Value) & 1, c = count >> 1;
			return new Octagon2D((count & 1) * Value
				^ ((0xC0 >> Value) & c & 1) ^ ((c & v) * 7)
				^ (0xF >> ((Value >> 1) - (count & 7)) & v)
			);
			return new Octagon2D((count & 1) * Value
				^ (0x400C >> ((Value - 6 << 1 & 0x1C) | (count & 3)) & 1)
				^ ((8 >> (Value + 2 >> 2)) & (count >> 2) & 1)
				^ (0x18 >> ((Value - 0xA & 0xC) | (count & 2)) & 6)
			);
			return new Octagon2D((count & 1) * Value
				^ (0x400C >> ((Value - 6 << 1 & 0x1C) | (count & 3)) & 1)
				^ ((Value + 2 >> 3) & (Value + 2 >> 2) & (count >> 2))
				^ (0x180 >> ((Value - 6 & 0xC) | (count & 2)) & 6)
			);
			//*/
		}

		public override int GetHashCode() { return Value; }
		public override bool Equals(object o) { return o is Octagon2D && Equals((Octagon2D)o); }
		public bool Equals(Octagon2D o) { return Value == o.Value; }
		public override string ToString() { return _names[Value]; }

		/// <exception cref="ArgumentException">
		/// Invalid <paramref name="name"/>.
		/// </exception>
		public static Octagon2D FromString(string name) {
			int index = Array.IndexOf<string>(_names, name);
			if(index >= 0) return new Octagon2D(index);
			StringBuilder sb = new StringBuilder("Acceptable values : ");
			sb.Append(_names[0]);
			for(int i = 1; i < _count; ++i) {
				sb.Append(", ");
				sb.Append(_names[i]);
			}
			sb.Append(".");
			throw new ArgumentException(sb.ToString(), "name");
		}
		public static Octagon2D FromInt32(int value) { return new Octagon2D(value & 0xF); }
		public static Octagon2D FromFlipRotate2D(FlipRotate2D value) { return new Octagon2D(value.Value); }
		public static Octagon2D FromRotateFlipType(RotateFlipType value) {
			return FromFlipRotate2D(FlipRotate2D.FromRotateFlipType(value));
		}

		public static bool operator ==(Octagon2D l, Octagon2D r) { return l.Equals(r); }
		public static bool operator !=(Octagon2D l, Octagon2D r) { return !l.Equals(r); }

		public static Octagon2D operator +(Octagon2D o) { return o; }
		public static Octagon2D operator -(Octagon2D o) { return o.InverseElement; }
		public static Octagon2D operator +(Octagon2D l, Octagon2D r) { return l.Add(r); }
		public static Octagon2D operator -(Octagon2D l, Octagon2D r) { return l.Subtract(r); }
		public static Octagon2D operator *(Octagon2D l, int r) { return l.Times(r); }
		public static Octagon2D operator *(int l, Octagon2D r) { return r.Times(l); }

		public static explicit operator Octagon2D(int o) { return FromInt32(o); }
		public static implicit operator Octagon2D(FlipRotate2D o) { return FromFlipRotate2D(o); }
		public static implicit operator Octagon2D(RotateFlipType o) { return FromRotateFlipType(o); }
	}
}
