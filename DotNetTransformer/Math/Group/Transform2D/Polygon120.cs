using System;
using System.Collections.Generic;
using StringBuilder = System.Text.StringBuilder;
using RotateFlipType = System.Drawing.RotateFlipType;

namespace DotNetTransformer.Math.Group.Transform2D {
	[Serializable]
	public struct Polygon120 : IFiniteGroupElement<Polygon120>
	{
		public readonly byte Value;
		private Polygon120(byte value) { Value = value; }
		private Polygon120(int value) { Value = (byte)value; }

		private const byte _count = 240;
		private const byte _mod = 120;
		public static readonly FiniteGroup<Polygon120> AllValues;

		/// <summary> No changes | 360 degree rotation. </summary>
		public static readonly Polygon120 None;
		/// <summary> Horizontal flip. Reflection across y-axis. </summary>
		public static readonly Polygon120 FlipX;
		/// <summary> Vertical flip. Reflection across x-axis. </summary>
		public static readonly Polygon120 FlipY;
		/// <summary> 2Pi/120 rad | 3 degree rotation. </summary>
		public static readonly Polygon120 Rotate003;
		/// <summary> 2Pi/12 rad | 30 degree rotation. </summary>
		public static readonly Polygon120 Rotate030;
		/// <summary> 2Pi/10 rad | 36 degree rotation. </summary>
		public static readonly Polygon120 Rotate036;
		/// <summary> 2Pi/8 rad | 45 degree rotation. </summary>
		public static readonly Polygon120 Rotate045;
		/// <summary> 2Pi/6 rad | 60 degree rotation. </summary>
		public static readonly Polygon120 Rotate060;
		/// <summary> 2Pi/5 rad | 72 degree rotation. </summary>
		public static readonly Polygon120 Rotate072;
		/// <summary> 2Pi/4 rad | 90 degree rotation. </summary>
		public static readonly Polygon120 Rotate090;
		/// <summary> 2Pi/3 rad | 120 degree rotation. </summary>
		public static readonly Polygon120 Rotate120;
		/// <summary> 2Pi/2 rad | 180 degree rotation. </summary>
		public static readonly Polygon120 Rotate180;

		static Polygon120() {
			None      = new Polygon120(  0);
			FlipX     = new Polygon120(  1);
			FlipY     = new Polygon120(121);
			Rotate003 = new Polygon120(  2);
			Rotate030 = new Polygon120( 20);
			Rotate036 = new Polygon120( 24);
			Rotate045 = new Polygon120( 30);
			Rotate060 = new Polygon120( 40);
			Rotate072 = new Polygon120( 48);
			Rotate090 = new Polygon120( 60);
			Rotate120 = new Polygon120( 80);
			Rotate180 = new Polygon120(120);
			AllValues = new DihedralGroupD120();
		}

		private sealed class DihedralGroupD120 : FiniteGroup<Polygon120>
		{
			public DihedralGroupD120() { }

			public override Polygon120 IdentityElement { get { return None; } }
			public override int Count { get { return _count; } }
			public override bool Contains(Polygon120 item) { return true; }
			public override IEnumerator<Polygon120> GetEnumerator() {
				for(byte i = 0; i < _count; ++i)
					yield return new Polygon120(i);
			}
			public override int GetHashCode() { return _count; }
		}

		/// <summary><return>
		/// <para>true for reflections (flip + rotation);</para>
		/// <para>false for rotations.</para>
		/// </return></summary>
		public bool IsReflection { get { return (Value & 1) == 1; } }
		/// <summary><return>
		/// <para>true for rotations;</para>
		/// <para>false for reflections (flip + rotation).</para>
		/// </return></summary>
		public bool IsRotation { get { return (Value & 1) == 0; } }

		public Polygon120 InverseElement {
			get {
				if(IsReflection || Value == 0) return this;
				return new Polygon120(_count - Value);
			}
		}
		/// <summary>
		/// The order of a cyclic group that can be generated by this element.
		/// </summary>
		public int CycleLength {
			get {
				if(IsReflection) return 2;
				/*//
				int r = 1;
				if(Value % 0x04 == 0) r *= 2;
				if(Value % 0x06 == 0) r *= 3;
				if(Value % 0x08 == 0) r *= 2;
				if(Value % 0x0A == 0) r *= 5;
				if(Value % 0x10 == 0) r *= 2;
				return _mod / r;
				/*/
				int r = _mod;
				if(Value % 0x06 == 0) r &= 0x28;
				if(Value % 0x0A == 0) r &= 0x18;
				if((Value & 0x02) == 0) r >>= 1;
				if((Value & 0x06) == 0) r >>= 1;
				if((Value & 0x0E) == 0) r >>= 1;
				return r;
				//*/
			}
		}
		public Polygon120 Add(Polygon120 other) {
			int o = (other.Value & -2), f = (Value ^ other.Value) & 1;
			if(IsReflection) o = _count - o;
			return new Polygon120(((Value & -2) + o) % _count ^ f);
		}
		public Polygon120 Subtract(Polygon120 other) {
			int o = (other.Value & -2), f = (Value ^ other.Value) & 1;
			if(f == 0) o = _count - o;
			return new Polygon120(((Value & -2) + o) % _count ^ f);
		}
		public Polygon120 Times(int count) {
			if(IsReflection) return new Polygon120((count & 1) * Value);
			return new Polygon120((count % _mod + _mod) * Value % _count);
		}

		public override int GetHashCode() { return Value; }
		public override bool Equals(object o) { return o is Polygon120 && Equals((Polygon120)o); }
		public bool Equals(Polygon120 o) { return Value == o.Value; }
		public override string ToString() {
			int v = (Value >> 1) * 3;
			if(v == 0) return Value == 0 ? "NO" : "FX";
			return string.Format(IsReflection ? "FX+R{0:000}" : "R{1:000}", 360 - v, v);
		}

		public static Polygon120 FromInt32(int value) {
			return new Polygon120((value % _count + _count) % _count);
		}
		public static Polygon120 FromFlipRotate2D(FlipRotate2D value) {
			return FromRotateFlipType(value.ToRotateFlipType());
		}
		public static Polygon120 FromRotateFlipType(RotateFlipType value) {
			int v = (int)value;
			return new Polygon120((v & 3) * 60 ^ (v >> 2));
		}

		public static bool operator ==(Polygon120 l, Polygon120 r) { return l.Equals(r); }
		public static bool operator !=(Polygon120 l, Polygon120 r) { return !l.Equals(r); }

		public static Polygon120 operator +(Polygon120 o) { return o; }
		public static Polygon120 operator -(Polygon120 o) { return o.InverseElement; }
		public static Polygon120 operator +(Polygon120 l, Polygon120 r) { return l.Add(r); }
		public static Polygon120 operator -(Polygon120 l, Polygon120 r) { return l.Subtract(r); }
		public static Polygon120 operator *(Polygon120 l, int r) { return l.Times(r); }
		public static Polygon120 operator *(int l, Polygon120 r) { return r.Times(l); }

		public static explicit operator Polygon120(int o) { return FromInt32(o); }
		public static implicit operator Polygon120(FlipRotate2D o) { return FromFlipRotate2D(o); }
		public static implicit operator Polygon120(RotateFlipType o) { return FromRotateFlipType(o); }
	}
}
